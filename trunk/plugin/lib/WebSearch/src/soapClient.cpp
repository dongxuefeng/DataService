/* soapClient.cpp
   Generated by gSOAP 2.8.17r from webClient.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.17r 2014-07-16 09:28:30 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns2__rcvautoinfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string req, std::string &res)
{	struct ns2__rcvautoinfo soap_tmp_ns2__rcvautoinfo;
	struct ns2__rcvautoinfoResponse *soap_tmp_ns2__rcvautoinfoResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/ http://localhost//webservice.cgi";
	if (soap_action == NULL)
		soap_action = "";
	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_tmp_ns2__rcvautoinfo.req = req;
	soap_serializeheader(soap);
	soap_serialize_ns2__rcvautoinfo(soap, &soap_tmp_ns2__rcvautoinfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns2__rcvautoinfo(soap, &soap_tmp_ns2__rcvautoinfo, "ns2:rcvautoinfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns2__rcvautoinfo(soap, &soap_tmp_ns2__rcvautoinfo, "ns2:rcvautoinfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&res)
		return soap_closesock(soap);
	soap_default_std__string(soap, &res);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns2__rcvautoinfoResponse = soap_get_ns2__rcvautoinfoResponse(soap, NULL, "", "");
	if (!soap_tmp_ns2__rcvautoinfoResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	res = soap_tmp_ns2__rcvautoinfoResponse->res;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
